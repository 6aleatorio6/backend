generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model usuario {
  id           Int            @id @unique() @default(autoincrement())
  email        String?        @db.VarChar(80)
  senha        String?        @default("") @db.VarChar(100)
  googleId     String?        @db.VarChar(45)
  nascimento   DateTime?      @db.Date
  facebookId   String?        @db.VarChar(45)
  foto         String?        @db.VarChar(200)
  apelido      String?        @db.VarChar(50)
  nome         String?        @db.VarChar(50)
  cidade       String?        @db.VarChar(50)
  sexo         usuario_sexo?
  deleted_at   DateTime?
  visitas      visitas[]
  lidoPeloUser lidoPeloUser[]
}

model catalogo {
  uuid           String    @id @unique() @default(uuid()) @db.VarChar(60)
  funcionarioId  Int
  descricao      String    @db.VarChar(800)
  nomePopular    String    @db.VarChar(50)
  nomeCientifico String    @db.VarChar(50)
  especie        String?   @db.VarChar(50)
  som            String?   @db.VarChar(200)
  ftModel        String?   @db.VarChar(200)
  medalha        String?   @db.VarChar(200)
  deleted_at     DateTime?

  lidoPeloUser      lidoPeloUser[]
  catalogoGaleria   catalogoGaleria[]
  funcionario_autor funcionario       @relation(fields: [funcionarioId], references: [id])

  @@index([funcionarioId])
}

model catalogoGaleria {
  id            Int       @id @unique() @default(autoincrement())
  catalogo_uuid String    @db.VarChar(60)
  url           String    @db.VarChar(200)
  deleted_at    DateTime?

  catalogo catalogo @relation(fields: [catalogo_uuid], references: [uuid])

  @@index([catalogo_uuid])
}

model funcionario {
  id         Int               @id @unique() @default(autoincrement())
  email      String            @db.VarChar(80)
  senha      String            @db.VarChar(100)
  cpf        String            @db.VarChar(14)
  nome       String            @db.VarChar(50)
  roles      funcionario_roles
  catalogo   catalogo[]
  deleted_at DateTime?
}

model visitas {
  id           Int       @unique() @default(autoincrement())
  usuario_id   Int
  dataDaVisita DateTime  @default(now())
  deleted_at   DateTime?
  usuario      usuario   @relation(fields: [usuario_id], references: [id])

  @@index([usuario_id])
}

model lidoPeloUser {
  id               Int       @id @default(autoincrement())
  usuario_id       Int
  catalogo_uuid    String    @db.VarChar(60)
  dataDaDescoberta DateTime  @default(now())
  deleted_at       DateTime?

  usuario  usuario  @relation(fields: [usuario_id], references: [id])
  catalogo catalogo @relation(fields: [catalogo_uuid], references: [uuid])

  @@index([usuario_id])
  @@index([catalogo_uuid])
}

// se todo mundo acreditar que isso é um banco de arquivos, então é um banco de arquivos
model fileBasePaia {
  uuid     String @id() @default(uuid())
  file     Bytes
  mimeType String @db.VarChar(50)

  @@index([uuid])
}

enum usuario_sexo {
  F
  M
  O
}

enum funcionario_roles {
  ADM
  TOTEM
}
